{"version":3,"sources":["assets/images/main-bg.svg","assets/images/ic-resume.svg","assets/images/wip.svg","components/Home.js","components/WIP.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","bio","Home","className","src","background","alt","steps","loop","Infinity","wrapper","onClick","window","open","icon","WIP","wip","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,wKCKrCC,EAAM,CACR,4BAA6B,IAC7B,iBAAkB,IAClB,8BAA+B,IAC/B,eAAgB,IAChB,qBAAsB,IACtB,gBAAiB,IACjB,8BAA+B,IAC/B,mBAAoB,IACpB,iCAAkC,IAClC,mBAAoB,KA4BTC,EAzBF,WACT,OACI,yBAAKC,UAAU,QACX,yBAAKC,IAAKC,IAAYC,IAAI,8BAA8BH,UAAU,YAClE,yBAAKA,UAAU,cACX,yBAAKA,UAAU,SAAf,UACA,yBAAKA,UAAU,SAAf,QAA4B,6BAA5B,gBACA,kBAAC,IAAD,CACII,MAAON,EACPO,KAAMC,IACNC,QAAQ,IACRP,UAAU,SAIlB,yBAAKA,UAAU,YAAYQ,QAAS,WAChCC,OAAOC,KAAK,wEADhB,iBAII,yBAAKT,IAAKU,IAAMR,IAAI,KAAKH,UAAU,iB,gBC5BpCY,EANH,WACR,OACI,yBAAKX,IAAKY,IAAKV,IAAI,4CAA4CH,UAAU,SCUlEc,MAXf,WACE,OACE,yBAAKd,UAAU,OACb,yBAAKA,UAAU,eACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCGYe,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.57ea599b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/main-bg.1f546ea6.svg\";","module.exports = __webpack_public_path__ + \"static/media/ic-resume.dba5b8bd.svg\";","module.exports = __webpack_public_path__ + \"static/media/wip.0fe7ba92.svg\";","import React from 'react';\r\nimport background from '../assets/images/main-bg.svg';\r\nimport icon from '../assets/images/ic-resume.svg';\r\nimport Typical from 'react-typical';\r\n\r\nconst bio = [\r\n    'I am an android developer', 1000,\r\n    'I am a student', 1000,\r\n    'I am a MERN Stack developer', 1000,\r\n    'I am a gamer', 1000,\r\n    'I am a UI designer', 1000,\r\n    'I am a mentor', 1000,\r\n    'I am an open source fanatic', 1000,\r\n    'I am a javaphile', 1000,\r\n    'I am a data science enthusiast', 1000,\r\n    'I am a dog lover', 1000,\r\n]\r\n\r\nconst Home = () => {\r\n    return(\r\n        <div className=\"Home\">\r\n            <img src={background} alt='Oops, something went wrong!' className=\"main-bg\" />\r\n            <div className=\"Intro-text\">\r\n                <div className=\"Hello\">Hello!</div>\r\n                <div className=\"Intro\">I am <br /> Kumar Harsh</div>\r\n                <Typical\r\n                    steps={bio}\r\n                    loop={Infinity}\r\n                    wrapper=\"p\"\r\n                    className='bio'\r\n                />\r\n            </div>\r\n\r\n            <div className='cv-button' onClick={() => {\r\n                window.open('https://drive.google.com/open?id=1NC3cLCaLZ_m-lKh6DsHhFFtkrVO7Xm_L');\r\n            }}>\r\n                View My Resume\r\n                <img src={icon} alt='Go' className=\"ic-resume\" />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport wip from '../assets/images/wip.svg';\r\n\r\nconst WIP = () => {\r\n    return(\r\n        <img src={wip} alt=\"Work in Progress. Pleae check back later!\" className=\"wip\" />\r\n    )\r\n}\r\n\r\nexport default WIP;","import React from 'react';\r\nimport Home from './components/Home';\r\nimport WIP from './components/WIP';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"theme-light\">\r\n        <Home />\r\n        <WIP />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './assets/scss/index.scss';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}