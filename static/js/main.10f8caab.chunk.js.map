{"version":3,"sources":["assets/images/main-bg.svg","assets/images/ic-resume.svg","assets/images/wip.svg","components/Home.js","components/About.js","components/WIP.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","bio","Home","className","src","background","alt","steps","loop","Infinity","wrapper","onClick","window","open","icon","onContextMenu","e","preventDefault","About","WIP","wip","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,+KCKrCC,EAAM,CACR,6BAA8B,IAC9B,kBAAmB,IACnB,+BAAgC,IAChC,gBAAiB,IACjB,sBAAuB,IACvB,iBAAkB,IAClB,+BAAgC,IAChC,oBAAqB,IACrB,kCAAmC,IACnC,oBAAqB,KA8BVC,EA3BF,WACT,OACI,yBAAKC,UAAU,QACX,yBAAKC,IAAKC,IAAYC,IAAI,8BAA8BH,UAAU,YAClE,yBAAKA,UAAU,cACX,yBAAKA,UAAU,SAAf,UACA,yBAAKA,UAAU,SAAf,QAA4B,6BAA5B,gBACA,kBAAC,IAAD,CACII,MAAON,EACPO,KAAMC,IACNC,QAAQ,IACRP,UAAU,SAIlB,yBAAKA,UAAU,YAAYQ,QAAS,WAChCC,OAAOC,KAAK,wEADhB,iBAII,yBAAKT,IAAKU,IAAMR,IAAI,KAAKH,UAAU,YAAYY,cAAe,SAACC,GAC3DA,EAAEC,uBCPPC,EA3BD,WACV,OACI,yBAAKf,UAAU,SACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,SACf,yBAAKA,UAAU,gBAAgBG,IAAI,UAAUF,IAAI,4GAEjD,yBAAKD,UAAU,SACX,yBAAKA,UAAU,cAAa,oCAA5B,OACA,yBAAKA,UAAU,cAAf,UAAmC,0BAAMA,UAAU,QAAhB,OAA2B,4CAC9D,yBAAKA,UAAU,cACX,gIAGA,6RAGA,iK,+BCZTgB,EANH,WACR,OACI,yBAAKf,IAAKgB,IAAKd,IAAI,4CAA4CH,UAAU,SCclEkB,MAbf,WACE,OACE,yBAAKlB,UAAU,OAEb,yBAAKA,UAAU,eACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCDYmB,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.10f8caab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/main-bg.1f546ea6.svg\";","module.exports = __webpack_public_path__ + \"static/media/ic-resume.dba5b8bd.svg\";","module.exports = __webpack_public_path__ + \"static/media/wip.0fe7ba92.svg\";","import React from 'react';\nimport background from '../assets/images/main-bg.svg';\nimport icon from '../assets/images/ic-resume.svg';\nimport Typical from 'react-typical';\n\nconst bio = [\n    'I am an android developer.', 1000,\n    'I am a student.', 1000,\n    'I am a MERN Stack developer.', 1000,\n    'I am a gamer.', 1000,\n    'I am a UI designer.', 1000,\n    'I am a mentor.', 1000,\n    'I am an open source fanatic.', 1000,\n    'I am a javaphile.', 1000,\n    'I am a data science enthusiast.', 1000,\n    'I am a dog lover.', 1000,\n]\n\nconst Home = () => {\n    return(\n        <div className=\"Home\">\n            <img src={background} alt='Oops, something went wrong!' className=\"main-bg\" />\n            <div className=\"Intro-text\">\n                <div className=\"Hello\">Hello!</div>\n                <div className=\"Intro\">I am <br /> Kumar Harsh</div>\n                <Typical\n                    steps={bio}\n                    loop={Infinity}\n                    wrapper=\"p\"\n                    className='bio'\n                />\n            </div>\n\n            <div className='cv-button' onClick={() => {\n                window.open('https://drive.google.com/open?id=1NC3cLCaLZ_m-lKh6DsHhFFtkrVO7Xm_L');\n            }}>\n                View My Resume\n                <img src={icon} alt='Go' className=\"ic-resume\" onContextMenu={(e) => {\n                    e.preventDefault()\n                }} />\n            </div>\n        </div>\n    );\n}\n\nexport default Home;","import React from 'react';\n\nconst bio=' \\n\\n';\n\nconst About = () => {\n    return(\n        <div className='About'>\n            <div className='About-Container'>\n                <div className='Col-1'> \n                <img className='Profile-Photo' alt='Profile' src='https://avatars0.githubusercontent.com/u/46624829?s=400&u=387daf3f9715ebca5467a76694b28fa7e01a8b66&v=4' />\n                </div>\n                <div className='Col-2'>\n                    <div className='About-Me-1'><b>About</b> Me</div>\n                    <div className='About-Me-2'>Hello! <span className='Name'>I'm <b>Kumar Harsh</b></span></div>\n                    <div className='About-Me-3'>\n                        <p>\n                        I’m a second-year student at NIT, Patna pursuing B.Tech in Computer Science and Engineering.\n                        </p>\n                        <p>\n                        Being a tech-enthusiast, I love to explore new technologies and leverage them to solve real-life problems. I am a detail-oriented developer with diverse experience in developing web applications, hybrid & native mobile apps and cloud computing solutions.\n                        </p>\n                        <p>\n                        I am a campus leader at HackSlash and I’m driven by the will to create an impact and encourage diversity in communities.\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default About;","import React from 'react';\nimport wip from '../assets/images/wip.svg';\n\nconst WIP = () => {\n    return(\n        <img src={wip} alt=\"Work in Progress. Pleae check back later!\" className=\"wip\" />\n    )\n}\n\nexport default WIP;","import React from 'react';\nimport Home from './components/Home';\nimport About from './components/About';\nimport NavBar from './components/NavBar';\nimport WIP from './components/WIP';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <NavBar /> */}\n      <div className=\"theme-light\">\n        <Home />\n        <About />\n        <WIP />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/scss/index.scss';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}